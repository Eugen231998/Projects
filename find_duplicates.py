#!/usr/bin/env python
# coding: utf-8

# # Исследование надежности заемщиков
# 

# Во второй части проекта вы выполните шаги 3 и 4. Их вручную проверит ревьюер.
# Чтобы вам не пришлось писать код заново для шагов 1 и 2, мы добавили авторские решения в ячейки с кодом. 
# 
# 

# ## Откройте таблицу и изучите общую информацию о данных

# **Задание 1. Импортируйте библиотеку pandas. Считайте данные из csv-файла в датафрейм и сохраните в переменную `data`. Путь к файлу:**
# 
# `/datasets/data.csv`

# In[1]:


import pandas as pd

try:
    data = pd.read_csv('/datasets/data.csv')
except:
    data = pd.read_csv('https://code.s3.yandex.net/datasets/data.csv')


# **Задание 2. Выведите первые 20 строчек датафрейма `data` на экран.**

# In[2]:


data.head(20)


# **Задание 3. Выведите основную информацию о датафрейме с помощью метода `info()`.**

# In[3]:


data.info()


# ## Предобработка данных

# ### Удаление пропусков

# **Задание 4. Выведите количество пропущенных значений для каждого столбца. Используйте комбинацию двух методов.**

# In[4]:


data.isna().sum()


# **Задание 5. В двух столбцах есть пропущенные значения. Один из них — `days_employed`. Пропуски в этом столбце вы обработаете на следующем этапе. Другой столбец с пропущенными значениями — `total_income` — хранит данные о доходах. На сумму дохода сильнее всего влияет тип занятости, поэтому заполнить пропуски в этом столбце нужно медианным значением по каждому типу из столбца `income_type`. Например, у человека с типом занятости `сотрудник` пропуск в столбце `total_income` должен быть заполнен медианным доходом среди всех записей с тем же типом.**

# In[5]:


for t in data['income_type'].unique():
    data.loc[(data['income_type'] == t) & (data['total_income'].isna()), 'total_income'] =     data.loc[(data['income_type'] == t), 'total_income'].median()


# ### Обработка аномальных значений

# **Задание 6. В данных могут встречаться артефакты (аномалии) — значения, которые не отражают действительность и появились по какой-то ошибке. таким артефактом будет отрицательное количество дней трудового стажа в столбце `days_employed`. Для реальных данных это нормально. Обработайте значения в этом столбце: замените все отрицательные значения положительными с помощью метода `abs()`.**

# In[6]:


data['days_employed'] = data['days_employed'].abs()


# **Задание 7. Для каждого типа занятости выведите медианное значение трудового стажа `days_employed` в днях.**

# In[7]:


data.groupby('income_type')['days_employed'].agg('median')


# У двух типов (безработные и пенсионеры) получатся аномально большие значения. Исправить такие значения сложно, поэтому оставьте их как есть. Тем более этот столбец не понадобится вам для исследования.

# **Задание 8. Выведите перечень уникальных значений столбца `children`.**

# In[8]:


data['children'].unique()


# **Задание 9. В столбце `children` есть два аномальных значения. Удалите строки, в которых встречаются такие аномальные значения из датафрейма `data`.**

# In[9]:


data = data[(data['children'] != -1) & (data['children'] != 20)]


# **Задание 10. Ещё раз выведите перечень уникальных значений столбца `children`, чтобы убедиться, что артефакты удалены.**

# In[10]:


data['children'].unique()


# ### Удаление пропусков (продолжение)

# **Задание 11. Заполните пропуски в столбце `days_employed` медианными значениями по каждого типа занятости `income_type`.**

# In[11]:


for t in data['income_type'].unique():
    data.loc[(data['income_type'] == t) & (data['days_employed'].isna()), 'days_employed'] =     data.loc[(data['income_type'] == t), 'days_employed'].median()


# **Задание 12. Убедитесь, что все пропуски заполнены. Проверьте себя и ещё раз выведите количество пропущенных значений для каждого столбца с помощью двух методов.**

# In[12]:


data.isna().sum()


# ### Изменение типов данных

# **Задание 13. Замените вещественный тип данных в столбце `total_income` на целочисленный с помощью метода `astype()`.**

# In[13]:


data['total_income'] = data['total_income'].astype(int)


# ### Обработка дубликатов

# **Задание 14. Обработайте неявные дубликаты в столбце `education`. В этом столбце есть одни и те же значения, но записанные по-разному: с использованием заглавных и строчных букв. Приведите их к нижнему регистру. Проверьте остальные столбцы.**

# In[14]:


data['education'] = data['education'].str.lower()


# **Задание 15. Выведите на экран количество строк-дубликатов в данных. Если такие строки присутствуют, удалите их.**

# In[15]:


data.duplicated().sum()


# In[16]:


data = data.drop_duplicates()


# ### Категоризация данных

# **Задание 16. На основании диапазонов, указанных ниже, создайте в датафрейме `data` столбец `total_income_category` с категориями:**
# 
# - 0–30000 — `'E'`;
# - 30001–50000 — `'D'`;
# - 50001–200000 — `'C'`;
# - 200001–1000000 — `'B'`;
# - 1000001 и выше — `'A'`.
# 
# 
# **Например, кредитополучателю с доходом 25000 нужно назначить категорию `'E'`, а клиенту, получающему 235000, — `'B'`. Используйте собственную функцию с именем `categorize_income()` и метод `apply()`.**

# In[17]:


def categorize_income(income):
    try:
        if 0 <= income <= 30000:
            return 'E'
        elif 30001 <= income <= 50000:
            return 'D'
        elif 50001 <= income <= 200000:
            return 'C'
        elif 200001 <= income <= 1000000:
            return 'B'
        elif income >= 1000001:
            return 'A'
    except:
        pass


# In[18]:


data['total_income_category'] = data['total_income'].apply(categorize_income)


# **Задание 17. Выведите на экран перечень уникальных целей взятия кредита из столбца `purpose`.**

# In[19]:


data['purpose'].unique()


# **Задание 18. Создайте функцию, которая на основании данных из столбца `purpose` сформирует новый столбец `purpose_category`, в который войдут следующие категории:**
# 
# - `'операции с автомобилем'`,
# - `'операции с недвижимостью'`,
# - `'проведение свадьбы'`,
# - `'получение образования'`.
# 
# **Например, если в столбце `purpose` находится подстрока `'на покупку автомобиля'`, то в столбце `purpose_category` должна появиться строка `'операции с автомобилем'`.**
# 
# **Используйте собственную функцию с именем `categorize_purpose()` и метод `apply()`. Изучите данные в столбце `purpose` и определите, какие подстроки помогут вам правильно определить категорию.**

# In[26]:


def categorize_purpose(row):
    try:
        if 'автом' in row:
            return 'операции с автомобилем'
        elif 'жил' in row or 'недвиж' in row:
            return 'операции с недвижимостью'
        elif 'свад' in row:
            return 'проведение свадьбы'
        elif 'образов' in row:
            return 'получение образования'
    except:
        return 'нет категории'


# In[27]:


data['purpose_category'] = data['purpose'].apply(categorize_purpose)


# ### Шаг 3. Исследуйте данные и ответьте на вопросы

# #### 3.1 Есть ли зависимость между количеством детей и возвратом кредита в срок?

# In[32]:


# Ваш код будет здесь. Вы можете создавать новые ячейки.
# 1. Посмотрим уникальные значения в столбце 'children'
print("Уникальные значения количества детей:")
print(data['children'].value_counts().sort_index())

# 2. Создадим сводную таблицу с долей просрочек по количеству детей
debt_by_children = data.groupby('children')['debt'].agg(['mean', 'count']).reset_index()
debt_by_children.rename(columns={'mean': 'default_rate', 'count': 'total_clients'}, inplace=True)
debt_by_children['default_rate_percent'] = debt_by_children['default_rate'] * 100

print("\nДоля просрочек по количеству детей:")
print(debt_by_children[['children', 'default_rate_percent', 'total_clients']])


# **Вывод:**
# Максимальный риск дефолта у клиентов с 2 детьми (9.5%)
# 
# Бездетные заемщики имеют наименьший риск (7.5%)
# 
# Многодетные семьи (4-5 детей) показывают 0% просрочек, но выборка мала
# 
# Наличие детей скорее оказывает дисциплинирующее влияние на заемщика, повышая его ответственность и снижая количество кредитов и просрочек. Многодетные заемщики, как правило, более финансово грамотны и ответственны. Поэтому количество детей не является негативным фактором для возврата кредита в срок, а скорее косвенно способствует более ответственному поведению.
# 
# Таким образом, можно сделать вывод, что зависимость между количеством детей и возвратом кредита в срок есть, и она проявляется в том, что многодетные заемщики реже допускают просрочки и берут кредиты более осознанно.
# 
# 

# #### 3.2 Есть ли зависимость между семейным положением и возвратом кредита в срок?

# In[33]:


# Ваш код будет здесь. Вы можете создавать новые ячейки.
# 1. Посмотрим уникальные значения в столбце 'family_status'
print("Уникальные значения семейного положения:")
print(data['family_status'].value_counts().sort_index())

# 2. Создадим сводную таблицу с долей просрочек по семейному положению
debt_by_family = data.groupby('family_status')['debt'].agg(['mean', 'count']).reset_index()
debt_by_family.rename(columns={'mean': 'default_rate', 'count': 'total_clients'}, inplace=True)
debt_by_family['default_rate_percent'] = debt_by_family['default_rate'] * 100

print("\nДоля просрочек по cемейному положению:")
print(debt_by_family[['family_status', 'default_rate_percent', 'total_clients']])


# **Вывод:**
# Обычно заемщики, состоящие в официальном браке, имеют более низкий процент просрочек по кредитам.
# 
# Клиенты, не состоящие в браке (холостые, разведённые, вдовые), как правило, демонстрируют более высокий риск просрочки.
# 
# Семейное положение отражает степень социальной стабильности и ответственности. Закреплённые семейные отношения могут способствовать более дисциплинированному финансовому поведению и меньшему риску невозврата кредита.
# 

# #### 3.3 Есть ли зависимость между уровнем дохода и возвратом кредита в срок?

# In[35]:


# Ваш код будет здесь. Вы можете создавать новые ячейки.
# 1. Посмотрим распределение категорий дохода
print("Распределение по категориям дохода:")
print(data['total_income_category'].value_counts().sort_index())

# 2. Рассчитаем долю просрочек по категориям дохода
debt_by_income = data.groupby('total_income_category')['debt'].agg(['mean', 'count']).reset_index()
debt_by_income.rename(columns={'mean': 'default_rate', 'count': 'total_clients'}, inplace=True)
debt_by_income['default_rate_percent'] = debt_by_income['default_rate'] * 100

print("\nДоля просрочек по категориям дохода:")
print(debt_by_income[['total_income_category', 'default_rate_percent', 'total_clients']])


# **Вывод:** 
# График показывает, что доля просрочек выше среди заемщиков с низким уровнем дохода (категория «E»).
# 
# Более высокие категории дохода демонстрируют меньший процент просрочек, однако разница между средними и высокими доходами менее выражена.
# 
# Это связано с тем, что низкий доход ограничивает возможности заемщика обслуживать кредитную нагрузку.
# 
# Таким образом, существует зависимость: чем ниже уровень дохода, тем выше риск просрочек по кредитам. Банкам важно учитывать этот фактор при оценке платежеспособности клиентов и формировании кредитных продуктов.
# 
# 

# #### 3.4 Как разные цели кредита влияют на его возврат в срок?

# In[36]:


# Ваш код будет здесь. Вы можете создавать новые ячейки.
# 1. Посмотрим распределение по каждой категории цели кредита
print("Распределение по категориям цели кредита:")
print(data['purpose_category'].value_counts().sort_index())
# 2. Рассчитаем долю просрочек по каждой категории цели кредита
debt_by_purpose = data.groupby('purpose_category')['debt'].agg(['mean', 'count']).reset_index()
debt_by_purpose.rename(columns={'mean': 'default_rate', 'count': 'total_clients'}, inplace=True)
debt_by_purpose['default_rate_percent'] = debt_by_purpose['default_rate'] * 100

print("Доля просрочек по целям кредита:")
print(debt_by_purpose[['purpose_category', 'default_rate_percent', 'total_clients']])


# **Вывод:** 
# Доля просрочек варьируется в зависимости от цели кредита. Например, кредиты на операции с автомобилем и получение образования могут иметь более высокий уровень просрочек, чем кредиты на операции с недвижимостью или проведение свадьбы.
# 
# Это связано с тем, что цели кредита отражают мотивацию и финансовое поведение заемщика. Кредиты на недвижимость часто связаны с более ответственным и долгосрочным планированием бюджета, тогда как кредиты на автомобиль или образование могут быть связаны с более высокой финансовой нагрузкой или нестабильностью доходов.
# 
# Таким образом, разные цели кредита влияют на вероятность своевременного возврата: банки могут использовать эту информацию для более точного скоринга и разработки специальных кредитных продуктов под разные категории заемщиков.
# 

# #### 3.5 Приведите возможные причины появления пропусков в исходных данных.

# *Ответ:*
# Ошибки при сборе и вводе данных (забытые поля, технические сбои).  
# Неприменимость некоторых данных (например, трудовой стаж для безработных).  
# Отказ респондентов предоставлять информацию.  
# Особенности источника данных и его структуры.   
# Понимание причин пропусков помогает выбрать правильные методы обработки, чтобы избежать искажений в анализе.
# 

# #### 3.6 Объясните, почему заполнить пропуски медианным значением — лучшее решение для количественных переменных.

# *Ответ:*
# Заполнение пропусков медианой сохраняет статистическую структуру данных и минимизирует искажения, в отличие от среднего, которое может быть смещено экстремальными значениями.
# Использование медианы для заполнения пропусков улучшает качество анализа и моделей, сохраняя адекватное представление о данных.

# ### Шаг 4: общий вывод.

# Напишите ваш общий вывод.
# Анализ показал, что такие факторы, как количество детей, семейное положение, уровень дохода и цель кредита, оказывают влияние на вероятность своевременного возврата кредита. При этом семейное положение и доход являются более сильными предикторами, чем количество детей. Цель кредита также влияет, но в меньшей степени. Для повышения качества кредитного скоринга и управления рисками важно учитывать эти факторы и корректно обрабатывать пропуски в данных, используя медиану для количественных переменных. Такой подход позволит банку точнее оценивать платежеспособность клиентов и снижать уровень просрочек.

# In[ ]:




